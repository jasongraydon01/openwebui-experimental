services:
  vllm-model1:
    build:
      context: ./vllm
      dockerfile: Dockerfile.vllm1
    container_name: vllm-container1
    ports:
      - "8000:8000"  # vLLM API for model1
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/models"]
      interval: 60s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - app_network

  vllm-model2:
    build:
      context: ./vllm
      dockerfile: Dockerfile.vllm2
    container_name: vllm-container2
    ports:
      - "8001:8001"  # vLLM API for model2
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/v1/models"]
      interval: 60s
      timeout: 20s
      retries: 10
      start_period: 180s
    networks:
      - app_network

  backend:
    image: python:3.10-slim  # Use the Python base image
    container_name: backend
    ports:
      - "5001:5001"
    volumes:
      - ./backend:/app/backend  # Mount backend code (useful for development)
      - /home/ubuntu/OneDrive/OneDrive-Test:/app/knowledge_base  # Mount PPTX files
      - ./entrypoint.sh:/app/entrypoint.sh
      - file_log_db:/app/log:rw  # Persist database folder; adjust to accomodate the synced local OneDrive folder
    working_dir: /app/backend  # Set the working directory to /app/backend
    entrypoint: ["/bin/bash", "-c", "pip install --no-cache-dir -r requirements.txt && /app/entrypoint.sh"]
    depends_on:
      vllm-model1:
        condition: service_healthy
      vllm-model2:
        condition: service_healthy
      openwebui:
        condition: service_healthy
    environment:
      - DATABASE_PATH=/app/log/file_log.db
      - FOLDER_PATH=/app/knowledge_base
      - NVIDIA_VISIBLE_DEVICES=all
      - VLLM_CHAT_URL=http://vllm-container1:8000/v1/chat/completions
      - VLLM_EMBED_URL=http://vllm-container2:8001/v1/embeddings
    restart: unless-stopped
    runtime: nvidia
    networks:
      - app_network

  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    ports:
      - "3100:8080"  # OpenWebUI frontend
    volumes:
      - open-webui:/app/backend/data
      - /home/ubuntu/openwebui-experimental/static/static:/app/build/custom_static
    depends_on:
      vllm-model1:
        condition: service_healthy
      vllm-model2:
        condition: service_healthy
    environment:
      - ENABLE_OPENAI_API=True
      - OPENAI_API_BASE_URL=http://vllm-model1:8000/v1
      - OPENAI_API_KEY=EMPTY
      - ENABLE_RAG_WEB_SEARCH=true
      - RAG_WEB_SEARCH_ENGINE=searchapi
      - SEARCH_API_KEY=gW9NEYWby2vdgsFvJjFPzsv9
      - SEARCHAPI_ENGINE=google
      - DEFAULT_MODELS=HawkGPT
      - STATIC_DIR=../build/custom_static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  open-webui:
  file_log_db: